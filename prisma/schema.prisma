// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)

  // Stripe-specific
  stripeCustomerId     String?  // to identify in Stripe
  stripeSubscriptionId String?  // current subscription
  subscriptionStatus   String?  // active, canceled, past_due, etc.

  subscriptionPlanId String?
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)

  accounts Account[]
  session  Session[]
}

enum Role {
  USER
  ADMIN
}

//auth and session

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime
}

// subscription plans 

model SubscriptionPlan {
  id        String    @id @default(uuid())
  name      String
  charge    Float
  duration  Duration @default(MONTHLY)
  isActive  Boolean   @default(true)
  currency  String   @default("USD")

  // Link to Stripe price ID
  stripePriceId String? // Price object in Stripe

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  features  Feature[] 
  users     User[]
}
enum Duration {
  MONTHLY
  YEARLY
}

model Feature {
  id     String           @id @default(uuid())
  text   String
  planId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}
